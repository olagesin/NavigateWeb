@page "/nfc-reader"
@inject IJSRuntime jsRuntime

<h3>NFC Reader</h3>

<button @onclick="ReadNFC">Read NFC Card</button>

<button @onclick="ListDevices">List Connected Devices</button>

@if (devices != null)
{
    <h4>Connected Devices:</h4>
    <ul>
        @foreach (var device in devices)
        {
            <li>@device.ProductName</li>
        }
    </ul>
    <button @onclick="() => ConnectToDevice(selectedDevice)">Connect to Device</button>
}

@code {
    private NFCData nfcData;
    private static CardReader cardReader;
    private IJSObjectReference? module;
    private UsbDevices selectedDevice;
    private string? result;


    protected override async Task OnInitializedAsync()
    {
        cardReader = this;
        module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./nfcreader.js");

        if (module is not null)
        {
            result = await module.InvokeAsync<string>("nfcreader");
        }
        //await JSRuntime.InvokeVoidAsync("initializeMap");
    }

    private List<UsbDevices> devices;


    private async Task ListDevices()
    {
        try
        {
            devices = await jsRuntime.InvokeAsync<List<UsbDevices>>("listConnectedDevices");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error listing connected devices: {ex.Message}");
        }
    }


    private async Task ConnectToDevice(UsbDevices device)
    {
        try
        {
            await jsRuntime.InvokeVoidAsync("connectToDevice", device);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to device: {ex.Message}");
        }
    }

    private async Task ReadNFC()
    {
        try
        {
            nfcData = new NFCData();

            // Call JavaScript interop to read NFC card
            await jsRuntime.InvokeVoidAsync("readNFC", DotNetObjectReference.Create(this));
        }
        catch (Exception ex)
        {
            // Handle any exceptions during NFC card reading
            Console.WriteLine($"Error reading NFC card: {ex.Message}");
        }
    }

    [JSInvokable("UpdateNFCData")]
    public static void UpdateNFCData(string cardId)
    {
        cardReader.UpdateNFCDataa(cardId);
    }

    public void UpdateNFCDataa(string cardId)
    {
        nfcData.CardId = cardId;

        // You can add more logic to handle other card details and perform additional actions

        // Trigger UI update
        StateHasChanged();
    }

    public class NFCData
    {
        public string CardId { get; set; }
        // Add other properties as needed to store the card details
    }

    public class UsbDevices
    {
        public string ProductName { get; set; }
    }

}
