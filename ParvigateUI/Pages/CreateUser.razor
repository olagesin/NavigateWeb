@page "/create-user"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using ParvigateUI.DTOs;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@attribute [Authorize(Roles="Admin")]

<h3>Create User</h3>

<div class="form-container">
    <EditForm Model="@user" OnValidSubmit="CreateUserMethod">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="firstName">First Name:</label>
            <InputText id="firstName" class="form-control" @bind-Value="@user.FirstName" />
            <ValidationMessage For="@(() => user.FirstName)" />
        </div>
        <div class="form-group">
            <label for="lastName">Last Name:</label>
            <InputText id="lastName" class="form-control" @bind-Value="@user.LastName" />
            <ValidationMessage For="@(() => user.LastName)" />
        </div>
        <div class="form-group">
            <label for="roleName">Role Name:</label>
            <InputText id="roleName" class="form-control" @bind-Value="@user.RoleName" />
            <ValidationMessage For="@(() => user.RoleName)" />
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="@user.Email" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" class="form-control" @bind-Value="@user.Password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
</div>

@code {
    JsonSerializerOptions options = new JsonSerializerOptions
        {
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            PropertyNameCaseInsensitive = true
        };
    private AddUserDto user = new AddUserDto();

    private async Task CreateUserMethod()
    {
        var response = await httpClient.PostAsJsonAsync("https://parvigateapi.azurewebsites.net/Users/add-user", user);

        var responseAsString = await response.Content.ReadAsStringAsync();
        var responseObject = JsonSerializer.Deserialize<GlobalResponse<GetUserDto>>(responseAsString, options);


        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "User added successfully");
            user = new AddUserDto();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", responseObject.Errors.First().ErrorMessages.First());
        }
    }

}
